¡#! /bin/bash


fun_bar () {
 comando[0]="$1" 
 comando[1]="$2" 
          (
          [[ -e $HOME/fim ]] && rm $HOME/fim
          ${comando[0]} > /dev/null 2>&1
          ${comando[1]} > /dev/null 2>&1
 $HOMEtáctil /fim
          ) > /dev/null 2>&1 &
          tput civis
		  echo -e  "\033[1;31m---------------------------------------------------\033[1;37m" 
          echo -ne  "${col7} ESPERE...\033[1;35m[" 
          mientras que verdadero; hacer
 para((i=0; i<18; i++)); do
          echo -ne  "\033[1;34m#" 
 dormir 0.2s
          hecho
         [[ -e $HOME/fim ]] && rm $HOME/fim && break
         echo -e  "${col5}" 
 dormir 1s
         tput cuu1
         tput dl1
         echo -ne  "\033[1;37m ESPERE...\033[1;35m[" 
         hecho
         echo -e  "\033[1;35m]\033[1;37m -\033[1;32m INSTALADO !\033[1;37m" 
         tput cnorm
		 echo -e  "\033[1;31m---------------------------------------------------\033[1;37m" 
        }
        
_core=$(printf  '%-1s'   "$(grep -c cpu[0-9] /proc/stat)") 
_usop=$(printf  '%-1s'   "$ $ (top -bn1 | awk  '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')") 

ram1=$(gratis -h | grep -i mem | awk {'print $2'}) 

_ram=$(printf  ' %-9s'   "$ $ (gratis -h | grep -i mem | awk {'print $2'})") 
_usor=$(printf  '%-8s'   "$ $ (gratis -m | awk  'NR==2{printf "%.2f%%", $3*100/$2 }')") 

os_system () {
system=$(echo  $(cat -n /etc/issue | grep 1 | corte -d' '  -f6,7,8 | sed  's/1//'  | sed  's/ //')) 
| de $system de eco awk  '{imprimir $1, $2}' 
}

meu_ip () {
si [[ -e /etc/MEUIPADM ]]; entonces
eco  "$(cat /etc/MEUIPADM)" 
más
MEU_IP=$(ip addr | grep  'inet'  | grep -v inet6 | grep -vE  '127\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | grep -o -E  '[0-9]{1,3}\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | cabeza -1) 
MEU_IP2=$(wget -qO- ipv4.icanhazip.com) 
[[  "$MEU_IP"  !=  "$MEU_IP2"  ]] && echo  "$MEU_IP2"  || echo  "$MEU_IP" 
echo  "$MEU_IP2"  > /etc/MEUIPADM
fi
}
fun_ip () {
si [[ -e /etc/MEUIPADM ]]; entonces
IP="$(cat /etc/MEUIPADM)" 
más
MEU_IP=$(ip addr | grep  'inet'  | grep -v inet6 | grep -vE  '127\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | grep -o -E  '[0-9]{1,3}\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | cabeza -1) 
MEU_IP2=$(wget -qO- ipv4.icanhazip.com) 
[[  "$MEU_IP"  !=  "$MEU_IP2"  ]] && IP="$MEU_IP2"  || IP="$MEU_IP" 
echo  "$MEU_IP2"  > /etc/MEUIPADM
fi
}

claro&&claro
echo -e  "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\e[7;31m SISTEMAS CANTIDAD USO \e[0m" 
echo -e  "\e[7;35 - CPU ➛ \e[0m \033[1;93m$_core\e[0m \033[1;32m$_usop\e[0m " 
echo -e  "\e[7;34 - RAM ➛ \e[0m \033[1;93m$ram 1\e[0m \033[1;32m$_usor\e[0m" 
echo -e  "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\e[7;35m Sistema Operativo: \e[0m"   "\033[1;37m$(os_system)  " 
echo -e "\e[7;35m  IP del Servidor:    \e[0m"  "\033[1;37m$(meu_ip)        "
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\e[7;32m      |             @ReyRs_ViPro             |    \e[0m"
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;32m              SCRIPT AUTOCONFIGURACION                   "
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;36m                   Websocket                      "
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;37m ESTE ESCRIPT MODIFICARA SU CONFIGURACION DEL PYTHON "
echo -e "\033[1;37m DIRECTO | PUERTO A UTILIZAR 8080 REDIRIGIDO AL "
echo -e "\033[1;37m DROPBEAR 444 QUE DEBERAS INSTALAR MANUEALMENTE USTED "
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo

echo -e "\033[1;33m INSTALANDO PUERTO PYTHON... "
inst_py () {

pkill -f 8080
pkill python
apt install python -y
apt install screen -y

pt=$(netstat -nplt |grep 'sshd' | awk -F ":" NR==1{'print $2'} | cut -d " " -f 1)

 cat <<EOF > proxy.py
import socket, threading, thread, select, signal, sys, time, getopt
# CONFIG
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = 1080
PASS = ''
# CONST
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = "127.0.0.1:$pt"
RESPONSE = 'HTTP/1.1 101 SVP PLUS \r\n\r\n'
 
class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
	self.threadsLock = threading.Lock()
	self.logLock = threading.Lock()
    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
        self.running = True
        try:                    
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue
                
                conn = ConnectionHandler(c, self, addr)
                conn.start();
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()
            
    def printLog(self, log):
        self.logLock.acquire()
        print log
        self.logLock.release()
	
    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()
                    
    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            self.threads.remove(conn)
        finally:
            self.threadsLock.release()
                
    def close(self):
        try:
            self.running = False
            self.threadsLock.acquire()
            
            threads = list(self.threads)
            for c in threads:
                c.close()
        finally:
            self.threadsLock.release()
			
class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = ''
        self.server = server
        self.log = 'Connection: ' + str(addr)
    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True
            
        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True
    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
        
            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host')
            
            if hostPort == '':
                hostPort = DEFAULT_HOST
            split = self.findHeader(self.client_buffer, 'X-Split')
            if split != '':
                self.client.recv(BUFLEN)
            
            if hostPort != '':
                passwd = self.findHeader(self.client_buffer, 'X-Pass')
				
                if len(PASS) != 0 and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif len(PASS) != 0 and passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
                elif hostPort.startswith('127.0.0.1') or hostPort.startswith('localhost'):
                    self.method_CONNECT(hostPort)
                else:
                    self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
            else:
                print '- No X-Real-Host!'
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n')
        except Exception as e:
            self.log += ' - error: ' + e.strerror
            self.server.printLog(self.log)
	    pass
        finally:
            self.close()
            self.server.removeConn(self)
    def findHeader(self, head, header):
        aux = head.find(header + ': ')
    
        if aux == -1:
            return ''
        aux = head.find(':', aux)
        head = head[aux+2:]
        aux = head.find('\r\n')
        if aux == -1:
            return ''
        return head[:aux];
    def connect_target(self, host):
        i = host.find(':')
        if i != -1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            if self.method=='CONNECT':
                port = 22
            else:
                port = 8080
        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]
        self.target = socket.socket(soc_family, soc_type, proto)
        self.targetClosed = False
        self.target.connect(address)
    def method_CONNECT(self, path):
        self.log += ' - CONNECT ' + path
        
        self.connect_target(path)
        self.client.sendall(RESPONSE)
        self.client_buffer = ''
        self.server.printLog(self.log)
        self.doCONNECT()
    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False
        while True:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err:
                error = True
            if recv:
                for in_ in recv:
		    try:
                        data = in_.recv(BUFLEN)
                        if data:
			    if in_ is self.target:
				self.client.send(data)
                            else:
                                while data:
                                    byte = self.target.send(data)
                                    data = data[byte:]
                            count = 0
			else:
			    break
		    except:
                        error = True
                        break
            if count == TIMEOUT:
                error = True
            if error:
                break
def print_usage():
    print 'Usage: proxy.py -p <port>'
    print '       proxy.py -b <bindAddr> -p <port>'
    print '       proxy.py -b 0.0.0.0 -p 1080'
def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT
    
    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)
    
def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    
    print "\n ==============================\n"
    print "\n         PYTHON PROXY          \n"
    print "\n ==============================\n"
    print "corriendo ip: " + LISTENING_ADDR
    print "corriendo port: " + str(LISTENING_PORT) + "\n"
    print "Se ha Iniciado Por Favor Cierre el Terminal\n"
    
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()
 mientras que es cierto:
 probar:
            time.sleep(2)
 excepto KeyboardInterrupt:
 imprimir 'Deteniéndose...'
            server.close()
 quebrar
    
si __name__ == '__main__':
    parse_args(sys.argv[1:])
 principal()
EOF

screen -dmS pythonwe python proxy.py -p 8080&

}
fun_bar  'inst_py' 
rm -rf proxy.py
eco
echo -e  " \033[1;37m AHORA HAGA LO SIGUENTE " 
echo -e  " \033[1;37mPARA CREAR UN USUARIO ESCRIBA :CREARUSER " 
echo -e  " \033[1;37mPARA REMOVE UN USUARIO ESCRIBA :REMOUSER " 
eco
eco
eco '
eco
read -p "Usuario :" nombre
leer -p "Contraseña :" pase
useradd -M -s /bin/false $name
(echo $pass; echo $pass)|passwd $name 2>/dev/null'  > /bin/CREARUSER &&chmod +x /bin/CREARUSER
eco '
eco
read -p "Escriba su usuario que desa remover :" user
userdel -f $us'  >/bin/REMOUSER &&chmod +x /bin/REMOUSER
