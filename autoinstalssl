fun_bar () {
 comando[0]="$1" 
 comando[1]="$2" 
          (
          [[ -e $HOME/fim ]] && rm $HOME/fim
          ${comando[0]} > /dev/null 2>&1
          ${comando[1]} > /dev/null 2>&1
 $HOMEtáctil /fim
          ) > /dev/null 2>&1 &
          tput civis
		  echo -e  "\033[1;31m---------------------------------------------------\033[1;37m" 
          echo -ne  "${col7} ESPERE...\033[1;35m[" 
          mientras que verdadero; hacer
 para((i=0; i<18; i++)); do
          echo -ne  "\033[1;34m#" 
 dormir 0.2s
          hecho
         [[ -e $HOME/fim ]] && rm $HOME/fim && break
         echo -e  "${col5}" 
 dormir 1s
         tput cuu1
         tput dl1
         echo -ne  "\033[1;37m ESPERE...\033[1;35m[" 
         hecho
         echo -e  "\033[1;35m]\033[1;37m -\033[1;32m INSTALADO !\033[1;37m" 
         tput cnorm
		 echo -e  "\033[1;31m---------------------------------------------------\033[1;37m" 
        }
        
_core=$(printf  '%-1s'   "$(grep -c cpu[0-9] /proc/stat)") 
_usop=$(printf  '%-1s'   "$ $ (top -bn1 | awk  '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')") 

ram1=$(gratis -h | grep -i mem | awk {'print $2'}) 

_ram=$(printf  ' %-9s'   "$ $ (gratis -h | grep -i mem | awk {'print $2'})") 
_usor=$(printf  '%-8s'   "$ $ (gratis -m | awk  'NR==2{printf "%.2f%%", $3*100/$2 }')") 

os_system () {
system=$(echo  $(cat -n /etc/issue | grep 1 | corte -d' '  -f6,7,8 | sed  's/1//'  | sed  's/ //')) 
| de $system de eco awk  '{imprimir $1, $2}' 
}

meu_ip () {
si [[ -e /etc/MEUIPADM ]]; entonces
eco  "$(cat /etc/MEUIPADM)" 
más
MEU_IP=$(ip addr | grep  'inet'  | grep -v inet6 | grep -vE  '127\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | grep -o -E  '[0-9]{1,3}\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | cabeza -1) 
MEU_IP2=$(wget -qO- ipv4.icanhazip.com) 
[[  "$MEU_IP"  !=  "$MEU_IP2"  ]] && echo  "$MEU_IP2"  || echo  "$MEU_IP" 
echo  "$MEU_IP2"  > /etc/MEUIPADM
fi
}
fun_ip () {
si [[ -e /etc/MEUIPADM ]]; entonces
IP="$(cat /etc/MEUIPADM)" 
más
MEU_IP=$(ip addr | grep  'inet'  | grep -v inet6 | grep -vE  '127\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | grep -o -E  '[0-9]{1,3}\.[ 0-9]{1,3}\. [0-9] {1,3}\. [0-9] {1,3} '  | cabeza -1) 
MEU_IP2=$(wget -qO- ipv4.icanhazip.com) 
[[  "$MEU_IP"  !=  "$MEU_IP2"  ]] && IP="$MEU_IP2"  || IP="$MEU_IP" 
echo  "$MEU_IP2"  > /etc/MEUIPADM
fi
}

claro&&claro
echo -e  "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\e[7;31m SISTEMAS CANTIDAD USO \e[0m" 
echo -e  "\e[7;35 - CPU ➛ \e[0m \033[1;93m$_core\e[0m \033[1;32m$_usop\e[0m " 
echo -e  "\e[7;34 - RAM ➛ \e[0m \033[1;93m$ram 1\e[0m \033[1;32m$_usor\e[0m" 
echo -e  "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\e[7;35m Sistema Operativo: \e[0m"   "\033[1;37m$(os_system)  " 
echo -e  "\e[7;35m IP del Servidor: \e[0m"   " \033[1;37m$(meu_ip)  " 
echo -e  "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\e[7;32m | @ReyRs_ViPro | \e[0m" 
echo -e  "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\033[1;32m SCRIPT AUTOCONFIGURACION " 
echo -e  "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\033[1;36m PythonDirect + SSL " 
echo -e  "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
echo -e  "\033[1;37mEsta instalacion requiere que esten libres " 
echo -e  "\033[1;37mlos siguientespuertos 443 y 8080"
echo -e  "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" 
eco
echo -e  "\033[1;33m INSTALADO PUERTO SSL... " 
inst_ssl () {
pkill -f stunnel4
pkill -f stunnel
pkill -f 442
pkill -f v2ray
pkill -f v2-ui
apt-get purga stunnel4 -y
apt-get purga stunnel -y
apt-get install stunnel4 -y
apt-get install stunnel -y
pt=$(netstat -nplt | grep  'sshd'  | awk -F  ":"  NR==1{'print $2'} | corte -d  " "  -f 1) 
echo -e  "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:${pt}\naccept = 443"  > /etc/stunnel/stunnel.conf
openssl genrsa -out key.pem 2048 > /dev/null 2>&1
(eco br; echo br; echo uss; echo speed; echo pnl; echo SSHMODE; echo @SSHMODE.com)| openssl req -new -x509 -key key.pem -out cert.pem -days 1095 > /dev/null 2>&1
cat key.pem cert.pem >> /etc/stunnel/stunnel.pem
sed -i  's/ENABLED=0/ENABLED=1/g'  /etc/default/stunnel4
reinicio del servicio stunnel4
reinicio de aturdimiento del servicio
inicio del servicio stunnel4
}
fun_bar  'inst_ssl' 
echo -e  "\033[1;33m INSTALANDO PUERTO PYTHON... " 
inst_py () {

pkill -f 8080
pitón pkill
apt install python -y
apt pantalla de instalación -y

pt=$(netstat -nplt | grep  'sshd'  | awk -F  ":"  NR==1{'print $2'} | corte -d  " "  -f 1) 

 > proxy.pyEOF de cat<<
importar socket, threading, threading, thread, select, signal, sys, time, getopt
# CONFIGURACIÓN
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = 1080
PASS = ''
# CONST
BUFLEN = 4096 * 4
TIEMPO DE ESPERA = 60
DEFAULT_HOST = "127.0.0.1:$pt"
RESPUESTA = 'HTTP/1.1 101 Protocolos de conmutación \r\n\r\n'
 
clase Server(threading. Hilo):
    def __init__(self, host, port):
 Threading. Thread.__init__ (yo)
 self.running = Falso
        self.host = host
 self.port = puerto
        self.threads = []
 self.threadsLock = subprocesos. Cerradura()
 self.logLock = subprocesos. Cerradura()
    def run(self):
        self.soc = socket.socket(socket.AF_INET)
 self.soc.setsockopt(socket. SOL_SOCKET, zócalo. SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
 self.running = Verdadero
 probar: 
 mientras que self.running:
 probar:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
 excepto socket.timeout:
 continuar
                
                conn = ConnectionHandler(c, self, addr)
                conn.start();
                self.addConn(conn)
 finalmente:
 self.running = Falso
            self.soc.close()
            
    def printLog(self, log):
        self.logLock.acquire()
 registro de impresión
        self.logLock.release()
	
    def addConn(self, conn):
 probar:
            self.threadsLock.acquire()
 si es self.running:
                self.threads.append(conn)
 finalmente:
            self.threadsLock.release()
                    
    def removeConn(self, conn):
 probar:
            self.threadsLock.acquire()
            self.threads.remove(conn)
 finalmente:
            self.threadsLock.release()
                
    def close(self):
 probar:
 self.running = Falso
            self.threadsLock.acquire()
            
 threads = lista(self.threads)
 para c en hilos:
                c.close()
 finalmente:
            self.threadsLock.release()
			
clase ConnectionHandler(threading. Hilo):
    def __init__(self, socClient, server, addr):
 Threading. Thread.__init__ (yo)
        self.clientClosed = False
 self.targetClosed = Verdadero
        self.client = socClient
        self.client_buffer = ''
 self.server = servidor
 self.log = 'Conexión: ' + str(addr)
    def close(self):
 probar:
 si no es self.clientClosed:
 self.client.shutdown(socket. SHUT_RDWR)
                self.client.close()
 exceptuar:
 pasar
 finalmente:
 self.clientClosed = Verdadero
            
 probar:
 si no es self.targetClosed:
 self.target.shutdown(socket. SHUT_RDWR)
                self.target.close()
 exceptuar:
 pasar
 finalmente:
 self.targetClosed = Verdadero
    def run(self):
 probar:
            self.client_buffer = self.client.recv(BUFLEN)
        
            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host')
            
            if hostPort == '':
                hostPort = DEFAULT_HOST
            split = self.findHeader(self.client_buffer, 'X-Split')
 si se divide != '':
                self.client.recv(BUFLEN)
            
            if hostPort != '':
                passwd = self.findHeader(self.client_buffer, 'X-Pass')
				
 if len(PASS) != 0 y passwd == PASS:
                    self.method_CONNECT(hostPort)
 elif len(PASS) != 0 y passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
 elif hostPort.startswith('127.0.0.1') o hostPort.startswith('localhost'):
                    self.method_CONNECT(hostPort)
 más:
                    self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
 más:
 imprimir '- No X-Real-Host!'
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n')
 excepto excepción como e:
            self.log += ' - error: ' + e.strerror
            self.server.printLog(self.log)
 pasar
 finalmente:
            self.close()
            self.server.removeConn(self)
    def findHeader(self, head, header):
 aux = head.find(encabezado + ': ')
    
        if aux == -1:
 volver ''
        aux = head.find(':', aux)
 cabeza = cabeza[aux+2:]
        aux = head.find('\r\n')
        if aux == -1:
 volver ''
 cabeza de retorno[:aux];
    def connect_target(self, host):
        i = host.find(':')
 si i != -1:
 puerto = int(host[i+1:])
            host = host[:i]
 más:
            if self.method=='CONNECT':
 puerto = 442
 más:
 puerto = 8080
        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]
        self.target = socket.socket(soc_family, soc_type, proto)
 self.targetClosed = Falso
 self.target.connect(dirección)
    def method_CONNECT(self, path):
        self.log += ' - CONNECT ' + path
        
 self.connect_target(ruta)
 self.client.sendall(RESPUESTA)
        self.client_buffer = ''
        self.server.printLog(self.log)
        self.doCONNECT()
    def doCONNECT(self):
        socs = [self.client, self.target]
 recuento = 0
 error = Falso
 mientras que es cierto:
 contar += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
 si se equivoca:
 error = Verdadero
 si recv:
 para in_ en recv:
 probar:
 datos = in_.recv(BUFLEN)
 si los datos:
 si in_ es self.target:
 self.client.send(datos)
 más:
 mientras que los datos:
                                    byte = self.target.send(data)
 data = datos[byte:]
 recuento = 0
 más:
 quebrar
 exceptuar:
 error = Verdadero
 quebrar
 si cuenta == TIEMPO DE ESPERA:
 error = Verdadero
 si se ha producido un error:
                break
def print_usage():
    print 'Usage: proxy.py -p <port>'
    print '       proxy.py -b <bindAddr> -p <port>'
    print '       proxy.py -b 0.0.0.0 -p 1080'
def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT
    
    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)
    
def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    
    print "\n ==============================\n"
    print "\n         PYTHON PROXY          \n"
    print "\n ==============================\n"
    print "corriendo ip: " + LISTENING_ADDR
    print "corriendo port: " + str(LISTENING_PORT) + "\n"
    print "Se ha Iniciado Por Favor Cierre el Terminal\n"
    
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()
 mientras que es cierto:
 probar:
            time.sleep(2)
 excepto KeyboardInterrupt:
 imprimir 'Deteniéndose...'
            server.close()
 quebrar
    
si __name__ == '__main__':
    parse_args(sys.argv[1:])
 principal()
EOF

screen -dmS pythonwe python proxy.py -p 8080&

}
fun_bar  'inst_py' 
rm -rf proxy.py
eco
echo -e  " \033[1;37m AHORA HAGA LO SIGUENTE " 
echo -e  " \033[1;37mPARA CREAR UN USUARIO ESCRIBA :CREARUSER " 
echo -e  " \033[1;37mPARA REMOVE UN USUARIO ESCRIBA :REMOUSER " 
eco
eco
eco '
eco
read -p "Usuario :" nombre
leer -p "Contraseña :" pase
useradd -M -s /bin/false $name
(echo $pass; echo $pass)|passwd $name 2>/dev/null'  > /bin/CREARUSER &&chmod +x /bin/CREARUSER
eco '
eco
read -p "Escriba su usuario que desa remover :" user
userdel -f $us'  >/bin/REMOUSER &&chmod +x /bin/REMOUSER
