#!/bin/bash

## SCRIPT RS CREACIONES GENERENCIADOR DE USUARIOS

## VARIABLES DE COLORES
blanco='\033[38;5;231m'
amarillo='\033[38;5;228m'
azul='\033[38;5;14m'
rojo='\033[0;31m'
verde='\033[38;5;148m'
resaltado2='\e[7;32m'
resaltado1='\e[41;1;34m'
resaltado3='\e[41;1;37m'
cierre2='\e[0m'
cierre='\033[0m'
bar4="\033[38;5;148m──────────────────────────────────────────────────────────────────────────────\033[0m"
bar1="\e[1;30m◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚\e[0m"
bar2="\033[38;5;226m------------------------------------------------------------------------------\033[0m"
bar3="\033[38;5;226m--------------------------------- = MENU =  ----------------------------------\033[0m"

## VARIABLES DE ENTORNO Y SYSTEMA 
USRdatabase="/etc/RSdb"
USRExp="/root/exp"

## FUNCION DE ERRORES 
err_fun () {
    case $1 in
     1)echo -e "${rojo}Nombre del cliente Nulo"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     2)echo -e "${rojo}Nombre del cliente muy corto"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     3)echo -e "${rojo}Nombre del cliente muy grande"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     4)echo -e "${rojo}Ip Nula"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     5)echo -e "${rojo}Ip del cliente Muy corta"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     6)echo -e "${rojo}Ip del cliente Muy Grande"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     7)echo -e "${rojo}Duracion Nula"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     8)echo -e "${rojo}Duracion no valida utiliza numeros"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     9)echo -e "${rojo}Duracion maxima de un ano"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     11)echo -e "${rojo}Cantidad Nula"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     12)echo -e "${rojo}Limite invalido utilize numeros"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     13)echo -e "${rojo}Limite maximo es de 999"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     14)echo -e "${rojo}Esta Ip Ya existe"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     esac
}

## FUNCIONES NECESARIAS
sort ${USRdatabase} | uniq > ${USRdatabase}tmp
mv -f ${USRdatabase}tmp ${USRdatabase}
meu_ip () {
if [[ -e /etc/MEUIPADM ]]; then
echo "$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && echo "$MEU_IP2" || echo "$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}

mostrar_usuarios () {
for u in `awk -F : '$3 > 900 { print $1 }' /etc/passwd | grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
echo "$u"
done
}

add_user () {
## FUNCION QUE AGRGA ALOS USUARIOS
[[ $(cat /etc/passwd |grep $1: |grep -vi [a-z]$1 |grep -v [0-9]$1 > /dev/null) ]] && return 1
valid=$(date '+%C%y-%m-%d' -d " +$3 days") && datexp=$(date "+%F" -d " + $3 days")
useradd -M -s /bin/false $1 -e ${valid} > /dev/null 2>&1 || return 1
(echo $2; echo $2)|passwd $1 2>/dev/null || {
    userdel --force $1
    return 1
    }
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   echo "$1|$2|${datexp}|$4|$5" > ${USRdatabase}
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   } || echo "$1|$2|${datexp}|$4|$5" > ${USRdatabase}
}
renew_user_fun () {
## RENOVACION DE USUARIOS
datexp=$(date "+%F" -d " + $2 days") && valid=$(date '+%C%y-%m-%d' -d " + $2 days")
chage -E $valid $1 2> /dev/null || return 1
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   useredit=$(cat ${USRdatabase}|grep -w "$1")
   pass=$(echo $useredit|cut -d'|' -f2)
   limit=$(echo $useredit|cut -d'|' -f4)
   echo "$1|$pass|${datexp}|$limit" > ${USRdatabase}
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   }
}
edit_user_fun () {
## EDICION DE USUARIOS DROPL
(echo "$2" ; echo "$2" ) |passwd $1 > /dev/null 2>&1 || return 1
datexp=$(date "+%F" -d " + $3 days") && valid=$(date '+%C%y-%m-%d' -d " + $3 days")
chage -E $valid $1 2> /dev/null || return 1
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   echo "$1|$2|${datexp}|$4" > ${USRdatabase}
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   } || echo "$1|$2|${datexp}|$4" > ${USRdatabase}
}
rm_user () {
## ELIMINA USUARIOS
userdel --force "$1" &>/dev/null || return 1
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   }
}

#ACTUALIZACION Y DESISTALACION
actualizar_fun () {
echo ""
echo -e " \033[1;33m[ ☑ ] apt-get update -y "
apt-get update -y > /dev/null 2>&1 
echo -e " \033[1;33m[ ☑ ] apt-get upgrade -y "
apt-get upgrade -y > /dev/null 2>&1 
rm -rf $HOME/panelweb.sh; wget https://raw.githubusercontent.com/RmXF/rsadm/main/panelweb; chmod 755 *; mv panelweb.sh /usr/bin/usercode; usercode
echo ""
}

eliminar_script () {
clear
clear 
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "              ¿ DESEA DESINSTALAR SCRIPT ?                  "
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
while [[ ${yesno} != @(si|SI|yes|YES|no|NO) ]]; do
read -p " [S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
rm -rf ${SCPdir} &>/dev/null
rm -rf ${SCPusr} &>/dev/null
rm -rf ${SCPinst} &>/dev/null
[[ -e /bin/usercode ]] && rm /bin/usercode
[[ -e /usr/bin/usercode ]] && rm /usr/bin/usercode
[[ -e /bin/menu ]] && rm /bin/menu
[[ -e /usr/bin/menu ]] && rm /usr/bin/menu
cd $HOME
fi
sudo apt-get --purge remove squid -y > /dev/null 2>&1
sudo apt-get --purge remove stunnel4 -y > /dev/null 2>&1
sudo apt-get --purge remove dropbear -y > /dev/null 2>&1
sudo apt-get --purge remove v2ray -y > /dev/null 2>&1
}

#Backups
backup () {
clear
echo -ne "${azul}HERRAMIENTA DE BACKUP DE USUARIOS\n${cierre}"
echo -ne "$bar2\n"
echo -ne "${amarillo}[${cierre}${rojo}1${cierre}${amarillo}]${cierre} - CREAR COPIA DE USUARIO\n" 
echo -ne "${amarillo}[${cierre}${rojo}2${cierre}${amarillo}]${cierre} - RESTAURAR BACKUP\n"
echo -e "$bar2"
unset selection
while [[ ${selection} != @([1-2]) ]]; do
echo -ne "${amarillo}"Seleccione una Opcion" " && read selection
tput cuu1 && tput dl1
done
case ${selection} in
1)
cp ${USRdatabase} $HOME/Backup-adm
echo -e "${verde}"Procedimiento Hecho con Exito, Guardado en:")"
echo -e "${amarillo}mBACKUP"${cierre}" ${rojo}>${cierre} ${verde}$HOME/Backup-adm${cierre}"
;;
2)
while [[ ! -e ${dirbackup} ]]; do
echo -ne "${azul} Escriba la ubicacion de la copia de seguridad\n${cierre}" 
echo -ne "${blanco} ENTER para ruta predeterminada /root/Backup-adm: ${cierre}" && read dirbackup
echo -e "$bar2"
[[ -z "${dirbackup}" ]] && dirbackup="/root/Backup-adm"
tput cuu1 && tput dl1
done
VPSsec=$(date +%s)
while read line; do
nome=$(echo ${line}|cut -d'|' -f1)
[[ $(echo $(mostrar_usuarios)|grep -w "$nome") ]] && { ${rojo} "$nome [ERROR]${cierre}"
  continue
  }
senha=$(echo ${line}|cut -d'|' -f2)
DateExp=$(echo ${line}|cut -d'|' -f3)
DataSec=$(date +%s --date="$DateExp")
[[ "$VPSsec" -lt "$DataSec" ]] && dias="$(($(($DataSec - $VPSsec)) / 86400))" || dias="NP"
limite=$(echo ${line}|cut -d'|' -f4)
add_user "$nome" "$senha" "$dias" "$limite" &>/dev/null && ${verde} "$nome [CUENTA VALIDA]${cerrar}" || ${rojo} "$nome [CUENTA INVALIDA FECHA EXPIRADA]${cerrar}"
done < ${dirbackup}
;;
esac
read -p " ➢ Presione enter para volver "
rm -rf $HOME//etc/usr/bin/usercode; usercode
}



#LIMPIEZA
caches () {
clear
(
VE="" && MA="" && DE=""
while [[ ! -e /tmp/abc ]]; do
A+="."
echo -e "${VE}[${MA}${A}${VE}]" >&2
sleep 0.3s
tput cuu1 && tput dl1
done
echo -e "${VE}[${MA}${A}${VE}] - ${MA}[100%]\n" >&2
rm /tmp/abc
) &
echo 3 > /proc/sys/vm/drop_caches &>/dev/null
sleep 1s
sysctl -w vm.drop_caches=3 &>/dev/null
apt-get autoclean -y &>/dev/null
sleep 1s
apt-get clean -y &>/dev/null
rm /tmp/* &>/dev/null
touch /tmp/abc
sleep 0.2s
echo -ne "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m\n"
echo -ne "${azul}LIMPIEZA COMPLETADA${cierre}\n"
echo -ne "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m\n"
read -p " ➢ Presione enter para volver "
rm -rf /etc/usr/bin/usercode; usercode
}


nuevo_usuario () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
echo -e "${rojo}Ningun cliente de ah encontrado registrado${cierre}"
echo -e "$bar1"
else
echo -e "${azul}Clientes actualmente activos en el servidor${cierre}"
echo -e "$bar1"
for us in $(echo ${usuarios_ativos[@]}); do
echo -ne "${blanco}Usuario: ${cierre}" && echo -e "${amarillo}${us}${cierre}"
done
echo -e "$bar1"
fi
while true; do
     echo -ne "${blanco}Nombre del Nuevo Cliente${cierre}"
     read -p ": " nomeuser
     nomeuser="$(echo $nomeuser|sed -e 's/[^a-z0-9 -]//ig')"
     if [[ -z $nomeuser ]]; then
     err_fun 1 && continue
     elif [[ "${#nomeuser}" -lt "2" ]]; then
     err_fun 2 && continue
     elif [[ "${#nomeuser}" -gt "24" ]]; then
     err_fun 3 && continue
     elif [[ "$(echo ${usuarios_ativos[@]}|grep -w "$nomeuser")" ]]; then
     err_fun 14 && continue
     fi
     break
done
while true; do
     echo -ne "${blanco}Ip de la droplet del cliente${cierre}"
     read -p ": " senhauser
     if [[ -z $senhauser ]]; then
     err_fun 4 && continue
     elif [[ "${#senhauser}" -lt "2" ]]; then
     err_fun 5 && continue
     elif [[ "${#senhauser}" -gt "20" ]]; then
     err_fun 6 && continue
     fi
     break
done
while true; do
     echo -ne "${blanco}Tiempo de Duracion de la droplet${cierre}"
     read -p ": " diasuser
     if [[ -z "$diasuser" ]]; then
     err_fun 7 && continue
     elif [[ "$diasuser" != +([0-9]) ]]; then
     err_fun 8 && continue
     elif [[ "$diasuser" -gt "360" ]]; then
     err_fun 9 && continue
     fi 
     break
done
while true; do
     echo -ne "${blanco}Cantidad de CPU${cierre}"
     read -p ": " limiteuser
     if [[ -z "$limiteuser" ]]; then
     err_fun 11 && continue
     elif [[ "$limiteuser" != +([0-9]) ]]; then
     err_fun 12 && continue
     elif [[ "$limiteuser" -gt "999" ]]; then
     err_fun 13 && continue
     fi
     break
done
while true; do
     echo -ne "${blanco}Cantidad de RAM${cierre}"
     read -p ": " ram_content
     if [[ -z "$ram_content" ]]; then
     err_fun 11 && continue
     elif [[ "$ram_content" != +([0-9]) ]]; then
     err_fun 12 && continue
     elif [[ "$ram_content" -gt "999" ]]; then
     err_fun 13 && continue
     fi
     break
done
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     echo -e  "${resaltado2}                          ⇱  ADMINITRADOR REYCODE ⇲                    ${cierre2}"
     echo -e "$bar1"
     echo -ne "${amarillo}IP del cliente: " && echo -e "${blanco}$nomeuser${cierre}"
     echo -ne "${amarillo}Nombre del cliente: " && echo -e "${blanco}$senhauser"
     echo -ne "${amarillo}Dias de Duracion de la droplet: " && echo -e "${blanco}$diasuser${cierre}"
     echo -ne "${amarillo}Fecha de expiracion: " && echo -e "$(date "+%F" -d " + $diasuser days")"
     echo -ne "${amarillo}Cantidad de CPU: " && echo -e "${blanco}$limiteuser${cierre}"
     echo -ne "${amarillo}Cantidad de RAM: " && echo -e "${blanco}$ram_content${cierre}"

echo -e "$bar1"
add_user "${nomeuser}" "${senhauser}" "${diasuser}" "${limiteuser}" "${ram_content}" && echo -e "${verde}Registro creado con exito${cierre}" || echo -e "${rojo}Error, Registro no creado!!${cierre}"
[[ $(dpkg --get-selections|grep -w "openvpn"|head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && newclient "$nomeuser" "$senhauser"
echo -e "$bar1"
read -p " ➢ Presione enter para volver "
rm -rf /etc/usr/bin/usercode; usercode
}
eliminar_usuario () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
echo -e "${rojo}Ningun cliente se ah encontrado registrado${cierre}"
echo -e "$bar1"
return 1
else
echo -e "${amarillo}Clientes actualmente activos en el servidor${cierre}"
echo -e "$bar1"
i=0
for us in $(echo ${usuarios_ativos[@]}); do
echo -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
let i++
done
echo -e "$bar1"
fi
echo -e "${blanco}Escriba o seleccione un cliente${cierre}"
echo -e "$bar1"
unset selection
while [[ -z ${selection} ]]; do
echo -ne "\033[1;37mSeleccione una opcion: " && read selection
tput cuu1 && tput dl1
done
if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
usuario_del="${usuarios_ativos[$selection]}"
else
usuario_del="$selection"
fi
[[ -z $usuario_del ]] && {
     echo -e "${rojo}Error, Cliente no valido${cierre}"
     echo -e "$bar1"
     return 1
     }
[[ ! $(echo ${usuarios_ativos[@]}|grep -w "$usuario_del") ]] && {
     echo -e "${rojo}Error, Cliente no valido${cierre}"
     echo -e "$bar1"
     return 1
     }
echo -ne "${blanco}Cliente Selecionado: " && echo -ne "$usuario_del"
rm_user "$usuario_del" && echo -e "${verde} [Eliminado]${blanco}" || echo -e "${rojo} [No Eliminado]${cierre}"
sed -i "/$usuario_del/d" $USRdatabase
echo -e "$bar1"
read -p " ➢ Presione enter para volver "
rm -rf /etc/usr/bin/usercode; usercode
}
renovar_usuario () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
echo -e "${rojo}Ningun cliente se ah encontrado registrado${cierre}"
echo -e "$bar1"
return 1
else
echo -e "${amarillo}clientes actualmente activos en el servidor${cierre}"
echo -e "$bar1"
i=0
for us in $(echo ${usuarios_ativos[@]}); do
echo -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
let i++
done
echo -e "$bar1"
fi
echo -e "${amarillo}Escriba o seleccione un cliente${cierre}"
echo -e "$bar1"
unset selection
while [[ -z ${selection} ]]; do
echo -ne "\033[1;37mSeleccione la opcion: " && read selection
tput cuu1
tput dl1
done
if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
useredit="${usuarios_ativos[$selection]}"
else
useredit="$selection"
fi
[[ -z $useredit ]] && {
     echo -e "${rojo}Error, Cliente no valido${cierre}"
     echo -e "$bar1"
     return 1
     }
[[ ! $(echo ${usuarios_ativos[@]}|grep -w "$useredit") ]] && {
     echo -e "${rojo}Error, Cliente no valido${cierre}"
     echo -e "$bar1"
     return 1
     }
while true; do
     echo -ne "${amarillo}Nuevo Tiempo de Duracion de la droplet: $useredit${cierre}"
     read -p ": " diasuser
     if [[ -z "$diasuser" ]]; then
     echo -e '\n\n\n'
     err_fun 7 && continue
     elif [[ "$diasuser" != +([0-9]) ]]; then
     echo -e '\n\n\n'
     err_fun 8 && continue
     elif [[ "$diasuser" -gt "360" ]]; then
     echo -e '\n\n\n'
     err_fun 9 && continue
     fi
     break
done
echo -e "$bar1"
renew_user_fun "${useredit}" "${diasuser}" && echo -e "${verde}Usuario Modificado Con Exito!!!${cierre}" || echo -e "${rojo}Error, Usuario no modificado${cierre}"
echo -e "$bar1"
read -p " ➢ Presione enter para volver "
rm -rf /etc/usr/bin/usercode; usercode
}
editar_usuario () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
echo -e "${amarillo}Ningun cliente se ah encontrado registrado${cierre}"
echo -e "$bar1"
return 1
else
echo -e "${azul}Clientes Actualmente activos en el servidor${cierre}"
echo -e "$bar1"
i=0
for us in $(echo ${usuarios_ativos[@]}); do
echo -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
let i++
done
echo -e "$bar1"
fi
echo -e "${blanco}Seleccione el numero del cliente que desea modificar${cierre}"
echo -e "$bar1"
unset selection
while [[ -z ${selection} ]]; do
echo -ne "\033[1;37mSeleccione la opcion: " && read selection
tput cuu1; tput dl1
done
if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
useredit="${usuarios_ativos[$selection]}"
else
useredit="$selection"
fi
[[ -z $useredit ]] && {
     echo -e "${rojo}rror, Cliente no valido${cierre}"
     echo -e "$bar1"
     return 1
     }
[[ ! $(echo ${usuarios_ativos[@]}|grep -w "$useredit") ]] && {
     echo -e "${rojo}rror, Cliente no valido${rojo}"
     echo -e "$bar1"
     return 1
     }
while true; do
echo -ne "${blanco}Usuario Selecionado: " && echo -e "$useredit"
     echo -ne "${blanco}Nueva ip del Cliente: $useredit"
     read -p ": " senhauser
     if [[ -z "$senhauser" ]]; then
     err_fun 4 && continue
     elif [[ "${#senhauser}" -lt "2" ]]; then
     err_fun 5 && continue
     elif [[ "${#senhauser}" -gt "20" ]]; then
     err_fun 6 && continue
     fi
     break
done
while true; do
     echo -ne "${blanco}Duracion de la droplet: $useredit"
     read -p ": " diasuser
     if [[ -z "$diasuser" ]]; then
     err_fun 7 && continue
     elif [[ "$diasuser" != +([0-9]) ]]; then
     err_fun 8 && continue
     elif [[ "$diasuser" -gt "360" ]]; then
     err_fun 9 && continue
     fi
     break
done
while true; do
     echo -ne "${blanco}Cantidad de CPU: $useredit"
     read -p ": " limiteuser
     if [[ -z "$limiteuser" ]]; then
     err_fun 11 && continue
     elif [[ "$limiteuser" != +([0-9]) ]]; then
     err_fun 12 && continue
     elif [[ "$limiteuser" -gt "999" ]]; then
     err_fun 13 && continue
     fi
     break
done
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     echo -ne "${blanco}Nombre del Cliente: " && echo -e "$useredit"
     echo -ne "${blanco}Ip de la droplet: " && echo -e "$senhauser"
     echo -ne "${blanco}Duracion de la droplet: " && echo -e "$diasuser"
     echo -ne "${blanco}Fecha de expiracion: " && echo -e "$(date "+%F" -d " + $diasuser days")"
     echo -ne "${blanco}Cantidad de CPU: " && echo -e "$limiteuser"
echo -e "$bar1"
edit_user_fun "${useredit}" "${senhauser}" "${diasuser}" "${limiteuser}" && echo -e "${verde}Usuario Modificado Con Exito${cierre}" || echo -e "${rojo}Error, Usuario no modificado${cierre}"
echo -e "$bar1"
read -p " ➢ Presione enter para volver "
rm -rf /etc/usr/bin/usercode; usercode
}
detalles_de_usuario () {
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)
if [[ ! -e "${USRdatabase}" ]]; then
echo -e "${rojo}No se ha identificado una base de datos con cliente${cierre}"
echo -e "${rojo}Los cliente a seguir no contienen ninguna informacion${cierre}"
echo -e "$bar1"
fi
clear
echo -e "$bar1"
txtvar=$(printf '%-16s' "CLIENTE")
txtvar+=$(printf '%-16s' "IP")
txtvar+=$(printf '%-18s' "VENCIMIENTO")
txtvar+=$(printf '%-16s' "D/RESTANTE")
txtvar+=$(printf '%-7s' "RAM")
txtvar+=$(printf '%-18s' "CPU")
echo -e "\033[1;33m${txtvar}"
VPSsec=$(date +%s)
while read user; do
unset txtvar
data_user=$(chage -l "$user" |grep -i co |awk -F ":" '{print $2}')
txtvar=$(printf '%-21s' "${yellow}$user")
if [[ -e "${USRdatabase}" ]]; then
  if [[ $(cat ${USRdatabase}|grep -w "${user}") ]]; then
    txtvar+="$(printf '%-21s' "${yellow}$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f2)")"
    DateExp="$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f3)"
    DataSec=$(date +%s --date="$DateExp")
    cpu="$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f5)"
    if [[ " $VPSsec" -gt "$DataSec " ]]; then    
    EXPTIME="${resaltado3}[Expi]${cierre2}"
    else
    EXPTIME="${verde}[ $(($(($DataSec - $VPSsec)) / 86400)) ]"
    fi
    echo -e "$bar4"
    #txtvar+="$(printf '%-26s' "${yellow}${DateExp}${EXPTIME}")"
    txtvar+="$(printf '%-26s' "${yellow}${DateExp}")"
    txtvar+="$(printf '%-28s' "${EXPTIME}")"
    txtvar+="$(printf '%-12s' "${yellow}$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f4)")"
    txtvar+="$(printf '%-21s' "${cpu}")"
    else
    txtvar+="$(printf '%-21s' "${red}***")"
    txtvar+="$(printf '%-29s' "${red}***")"
    txtvar+="$(printf '%-11s' "${red}***")"
  fi
fi
echo -e "$txtvar"
done <<< "$(mostrar_usuarios)"
echo -e "$bar1"
read -p " ➢ Presione enter para volver "
rm -rf /etc/usr/bin/usercode; usercode
}


No_user="$(cat /etc/RSdb | wc -l)"

menu () {
clear
echo -e "\033[1;37m╔═════════════════════════════════════════════════════════════════════════════╗\033[0m"
echo -e "║\e[41;1;37m                    ⇱  ADMINITRADOR REYCODE ⇲                     \e[0m\e[7;32m V1.6 \e[0m║"
echo -e "\033[1;37m╠═════════════════════════════════════════════════════════════════════════════╣\033[0m"
echo -e "║${verde}     CUENTAS SSH - DROPLET - SCRIPT - APK MOD - DISEÑO WED (${amarillo}Reycode${cierre}${melon})║
${bar1}
${blanco}CANTIDAD TOTAL DE DROPLET: ${rojo}>${cierre} ${azul}N°: ${blanco}$No_user  ${cierre}
${bar3}
${azul}[${cierre}${rojo}1${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Agregar ${verde}Cliente${cierre}
${azul}[${cierre}${rojo}2${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Eliminar ${rojo}Cliente${cierre}
${azul}[${cierre}${rojo}3${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Editar ${amarillo}Cliente${cierre}
${azul}[${cierre}${rojo}4${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Renovar ${verde}Droplet${cierre}
${azul}[${cierre}${rojo}5${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Informacion de ${amarillo}Clientes${cierre}
${azul}[${cierre}${rojo}6${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Actualizacion del ${verde}script${cierre}
${azul}[${cierre}${rojo}7${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Desistalar ${rojo}script${cierre}
${azul}[${cierre}${rojo}8${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Limpiar memoria ${verde}Cache${cierre}
${azul}[${cierre}${rojo}9${cierre}${azul}]${cierre} ${rojo}>${cierre} ${blanco}Backup de ${verde}Clientes${cierre}
${azul}[${cierre}${blanco}0${cierre}${azul}]${cierre} ${rojo}>${cierre} ${rojo}SALIR${cierre}
${bar2}"
read -p "$(echo -e "${blanco}seleccione [0-9]:${cierre}")" selection
case "$selection" in
1)nuevo_usuario ;;
2)eliminar_usuario ;;
3)editar_usuario ;;
4)renovar_usuario ;;
5)detalles_de_usuario ;;
6)actualizar_fun ;;
7)eliminar_script ;;
8)caches ;;
9)backup ;;
	0)cd $HOME && exit 0;;
	*)
	echo -e "${rojo} Porfavor seleccione del [0-9]${cierre}"
	;;
esac
}
menu
                             
