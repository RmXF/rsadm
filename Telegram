#!/bin/bash
# TELEGRAM BOT VPS - VERSIÃ“N PROFESIONAL
# Incluye: gestiÃ³n de VPS, banners, reportes, logs, soporte y botones interactivos.

CONFIG_FILE="/etc/botrs.conf"
LOG_FILE="/var/log/banner_rs.log"
STATUS_FILE="/var/log/vps_status.txt"
CRON_FILE="/etc/cron.d/botrs_auto_reporte"

[[ -f $CONFIG_FILE ]] && source "$CONFIG_FILE"

send_message() {
  local MSG="$1"
  curl -s -X POST "https://api.telegram.org/bot$TOKEN/sendMessage"     -d chat_id="$ADMIN_ID"     -d text="$MSG"     -d parse_mode="HTML" > /dev/null
}

send_file() {
  local FILE="$1"
  curl -s -X POST "https://api.telegram.org/bot$TOKEN/sendDocument"     -F chat_id="$ADMIN_ID"     -F document=@"$FILE" > /dev/null
}

send_menu() {
  curl -s -X POST "https://api.telegram.org/bot$TOKEN/sendMessage"     -d chat_id="$ADMIN_ID"     -d text="ðŸ¤– <b>Panel VPS Avanzado</b>\nSeleccionÃ¡ una opciÃ³n:"     -d parse_mode="HTML"     -d reply_markup='{
      "inline_keyboard": [
        [{"text": "ðŸ“Š Estado VPS", "callback_data": "/estatus"}],
        [{"text": "âš™ï¸ Programar", "callback_data": "/programar"}],
        [{"text": "âŒ Cancelar", "callback_data": "/cancelar"}],
        [{"text": "ðŸ“… Ver programaciÃ³n", "callback_data": "/verprogramacion"}],
        [{"text": "ðŸ“¦ Logs", "callback_data": "/logmenu"}],
        [{"text": "ðŸ†˜ Soporte", "callback_data": "/soporte"}]
      ]
    }'
}

generar_estado_vps() {
  echo "===== ESTADO VPS - $(date) =====" > "$STATUS_FILE"
  echo "Hostname: $(hostname)" >> "$STATUS_FILE"
  echo "Uptime: $(uptime -p)" >> "$STATUS_FILE"
  echo "CPU: $(lscpu | grep 'Model name' | awk -F ':' '{print $2}')" >> "$STATUS_FILE"
  echo "RAM:" >> "$STATUS_FILE"
  free -h >> "$STATUS_FILE"
  echo -e "\nDisco:" >> "$STATUS_FILE"
  df -h / >> "$STATUS_FILE"
  echo -e "\nConectados:" >> "$STATUS_FILE"
  who >> "$STATUS_FILE"
  echo -e "\nIP: $(curl -s ifconfig.me)" >> "$STATUS_FILE"
  echo -e "\nProcesos: $(ps aux | wc -l)" >> "$STATUS_FILE"
  send_file "$STATUS_FILE"
}

programar_reporte_diario() {
  send_message "âŒš Â¿A quÃ© hora (0-23) querÃ©s recibir el reporte diario?"
  read -r HORA
  if [[ "$HORA" =~ ^[0-9]{1,2}$ && $HORA -ge 0 && $HORA -le 23 ]]; then
    echo "0 $HORA * * * root /bin/bash $0 --reporte-auto" > "$CRON_FILE"
    send_message "âœ… Reporte diario programado para las $HORA:00 hs"
  else
    send_message "âŒ Hora invÃ¡lida."
  fi
}

cancelar_reporte_diario() {
  if [[ -f "$CRON_FILE" ]]; then
    rm -f "$CRON_FILE"
    send_message "ðŸš« ProgramaciÃ³n eliminada."
  else
    send_message "âš ï¸ No hay tareas programadas."
  fi
}

ver_programacion() {
  if [[ -f "$CRON_FILE" ]]; then
    send_message "ðŸ“‹ ProgramaciÃ³n actual:\n<pre>$(cat "$CRON_FILE")</pre>"
  else
    send_message "âš ï¸ No hay tareas programadas."
  fi
}

logmenu() {
  curl -s -X POST "https://api.telegram.org/bot$TOKEN/sendMessage"     -d chat_id="$ADMIN_ID"     -d text="ðŸ“¦ Â¿En quÃ© formato querÃ©s el log?"     -d parse_mode="HTML"     -d reply_markup='{
      "inline_keyboard": [
        [
          {"text": "ðŸ“ TXT", "callback_data": "/logtxt"},
          {"text": "ðŸ“Š CSV", "callback_data": "/logcsv"},
          {"text": "ðŸ”™ MenÃº", "callback_data": "/start"}
        ]
      ]
    }'
}

configurar_bot() {
  echo "ðŸ”§ CONFIGURACIÃ“N INICIAL"
  read -p "Token del Bot: " TOKEN
  read -p "ID del Admin (Telegram): " ADMIN_ID
  read -p "Grupo Soporte (opcional): " TG_GROUP
  echo "TOKEN=$TOKEN" > "$CONFIG_FILE"
  echo "ADMIN_ID=$ADMIN_ID" >> "$CONFIG_FILE"
  echo "TG_GROUP=$TG_GROUP" >> "$CONFIG_FILE"
  echo "âœ… Guardado en $CONFIG_FILE"
}

if [[ "$1" == "--reporte-auto" ]]; then
  generar_estado_vps
  exit 0
fi

LAST_UPDATE_ID=0
while true; do
  UPDATES=$(curl -s "https://api.telegram.org/bot$TOKEN/getUpdates?offset=$((LAST_UPDATE_ID + 1))")
  echo "$UPDATES" | jq -c '.result[]' | while read -r UPDATE; do
    ID=$(echo "$UPDATE" | jq '.update_id')
    TEXT=$(echo "$UPDATE" | jq -r '.message.text // .callback_query.data')
    CHAT_ID=$(echo "$UPDATE" | jq -r '.message.chat.id // .callback_query.message.chat.id')
    USER_ID=$(echo "$UPDATE" | jq -r '.message.from.id // .callback_query.from.id')

    if [[ "$USER_ID" == "$ADMIN_ID" ]]; then
      case "$TEXT" in
        /start) send_menu ;;
        /estatus) generar_estado_vps ;;
        /programar) programar_reporte_diario ;;
        /cancelar) cancelar_reporte_diario ;;
        /verprogramacion) ver_programacion ;;
        /logmenu) logmenu ;;
        /logtxt) send_file "$LOG_FILE" ;;
        /logcsv)
          tmp="/tmp/log_export.csv"
          awk 'BEGIN{FS="|"; OFS=","; print "Fecha y Hora","Usuario","AcciÃ³n"} NR>2{gsub(/^ +| +$/, "", $1); gsub(/^ +| +$/, "", $2); gsub(/^ +| +$/, "", $3); print $1,$2,$3}' "$LOG_FILE" > "$tmp"
          send_file "$tmp"; rm -f "$tmp"
          ;;
        /soporte)
          if [[ -n "$TG_GROUP" ]]; then
            send_message "ðŸ†˜ <b>Soporte TÃ©cnico</b>\n<a href='$TG_GROUP'>ðŸ“£ Grupo de Soporte</a>"
          else
            send_message "ðŸ†˜ No hay grupo configurado. UsÃ¡ la opciÃ³n 'Configurar Bot' en el VPS."
          fi ;;
        *) send_message "â“ Comando no reconocido. UsÃ¡ /start" ;;
      esac
    fi
    LAST_UPDATE_ID=$ID
  done
  sleep 5
done
